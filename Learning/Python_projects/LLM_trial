# DATA-51100 SPRING-2024
# NAME: SUMANTH SINGAM
# PROGRAMMING ASSIGNMENT #6

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

class Vispums:
    def __init__(self):
        self.data = None
        self.run(self)
                
    @staticmethod
    def run(self):
        # Create a 2x2 subplot figure
        plot, axis = plt.subplots(2, 2, figsize=(15, 11))

        # Print assignment details
        print("DATA-51100 SPRING-2024")
        print("NAME: SUMANTH SINGAM")
        print("PROGRAMMING ASSIGNMENT #6")

        # Read data from CSV file
        self.read_data()

        # Create each subplot
        self.pie_chart(self.data, axis[0][0])
        self.histogram(self.data, axis[0][1])
        self.bar_chart(self.data, axis[1][0])
        self.scatter_plot(self.data, plot, axis[1][1])

        # Adjust layout and save the figure
        plot.tight_layout()
        plot.savefig('pums.png')
        plot.show()

    def read_data(self):
        """Load the PUMS data from the CSV file into a pandas DataFrame."""
        self.data = pd.read_csv("D:\Statistical Programming\csv_hil\ss13hil.csv")                

    @staticmethod
    def pie_chart(data, axis):
        """Create a pie chart of household languages (HHL)."""
        # Plot pie chart with no wedge labels
        piePlot = axis.pie(data['HHL'].dropna().value_counts(), startangle=242)
        axis.set_ylabel('HHL')
        axis.set_title('Household Languages')
        # Add legend in the upper left corner
        axis.legend(['English Only', 'Spanish', 'Other Indo-European', 'Asian and Pacific Island Languages', 'Other'], loc="upper left")

    @staticmethod
    def histogram(data, axis):
        """Create a histogram of household income (HINCP) with a KDE plot."""
        kde = stats.gaussian_kde(data['HINCP'].dropna().tolist())
        # Plot histogram with log-scaled bins
        axis.hist(data['HINCP'].dropna().tolist(), density=True, bins=np.logspace(1, 7, num=75, base=10), alpha=0.5, color='green')
        axis.set_title('Distribution of Household Income')
        axis.set_xlabel('Household Income($) - Log Scaled')
        axis.set_ylabel('Density')
        axis.set_xscale('log')
        axis.set_xlim(10)
        axis.grid()
        # Superimpose KDE plot
        axis.plot(np.logspace(1, 7, num=75, base=10), kde(np.logspace(1, 7, num=75, base=10)), color='black', linestyle='--')
        axis.set_yticks([0.000000, 0.000005, 0.000010, 0.000015, 0.000020])

    @staticmethod
    def bar_chart(data, axis):
        """Create a bar chart of the number of households with different vehicle availability (VEH)."""
        barChartData = [0, 0, 0, 0, 0, 0, 0]
        # Calculate the number of households for each VEH value
        for i in range(0, 7):
            df = data[data['VEH'] == i]
            barChartData[i] = df['WGTP'].dropna().sum() / 1000
        # Plot the bar chart
        axis.bar(['0', '1', '2', '3', '4', '5', '6'], barChartData, align='center', color='red')
        axis.set_xlabel('# of Vehicles')
        axis.set_ylabel('Thousands of Households')
        axis.set_title('Vehicles Available in Households')

    @staticmethod
    def scatter_plot(data, plot, axis):
        """Create a scatter plot of property taxes (TAXP) vs. property value (VALP)."""
        df = data[['VALP', 'TAXP', 'WGTP', 'MRGP']]
        df = df[df.TAXP != 1]  # Exclude entries where TAXP == 1 (NA value)

        # Dictionary to convert TAXP codes to dollar amounts
        taxpDict = {
            2: 1, 3: 50, 4: 100, 5: 150, 6: 200, 7: 250, 8: 300, 9: 350, 10: 400, 11: 450, 12: 500, 13: 550,
            14: 600, 15: 650, 16: 700, 17: 750, 18: 800, 19: 850, 20: 900, 21: 950, 22: 1000, 23: 1100, 24: 1200,
            25: 1300, 26: 1400, 27: 1500, 28: 1600, 29: 1700, 30: 1800, 31: 1900, 32: 2000, 33: 2100, 34: 2200,
            35: 2300, 36: 2400, 37: 2500, 38: 2600, 39: 2700, 40: 2800, 41: 2900, 42: 3000, 43: 3100, 44: 3200,
            45: 3300, 46: 3400, 47: 3500, 48: 3600, 49: 3700, 50: 3800, 51: 3900, 52: 4000, 53: 4100, 54: 4200,
            55: 4300, 56: 4400, 57: 4500, 58: 4600, 59: 4700, 60: 4800, 61: 4900, 62: 5000, 63: 5500, 64: 6000,
            65: 7000, 66: 8000, 67: 9000, 68: 10000
        }

        # Convert TAXP codes to dollar amounts and create scatter plot
        scatterPlot = axis.scatter(
            df.VALP.tolist(),
            list(map(taxpDict.get, df.TAXP.tolist())),
            c=df.MRGP.tolist(),
            s=[x / 8 for x in df.WGTP.tolist()],
            cmap=plt.cm.get_cmap('coolwarm'),
            alpha=0.5,
            marker='o'
        )

        axis.set_xlim([0, 1200000])
        axis.set_title('Property Taxes vs Property Values')
        axis.set_xlabel('Property Value($)')
        axis.set_ylabel('Taxes($)')

        # Add color bar
        plot.colorbar(scatterPlot, ax=axis).set_label('First Mortgage Payment (Monthly $)')

if __name__ == "__main__":
    Vispums()
